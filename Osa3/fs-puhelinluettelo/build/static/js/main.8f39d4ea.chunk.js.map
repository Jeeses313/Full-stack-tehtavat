{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","newObject","post","deletedObject","delete","id","put","Filter","filter","handleFilterChange","value","onChange","AddPersonForm","addPerson","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","PersonsList","personsToShow","handleDelete","map","person","key","name","Person","number","onClick","Notification","message","error","className","App","useState","persons","setPersons","setNewName","setNewNumber","setFilter","setMessage","useEffect","personService","then","response","data","toLowerCase","includes","event","target","preventDefault","existingPerson","forEach","window","confirm","setTimeout","catch","newPersons","listedPerson","newPerson","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8f39d4ea.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  return axios.get(baseUrl)\r\n}\r\n\r\nconst create = newObject => {\r\n  return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst deletedObject = (deletedObject) => {\r\n  return axios.delete(`${baseUrl}/${deletedObject.id}`)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  return axios.put(`${baseUrl}/${id}`, newObject)\r\n}\r\n\r\nexport default {getAll, create, deletedObject, update}","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\nimport './index.css'\n\nconst Filter = ({ filter, handleFilterChange }) => {\n  return (\n    <>\n      <div>\n        filter shown with <input value={filter} onChange={handleFilterChange} />\n      </div>\n    </>\n  )\n}\n\nconst AddPersonForm = ({ addPerson, newName, handleNameChange, newNumber, handleNumberChange }) => {\n  return (\n    <>\n      <h2>add a new</h2>\n      <form onSubmit={addPerson}>\n        <div>\n          name: <input value={newName} onChange={handleNameChange} />\n        </div>\n        <div>\n          number: <input value={newNumber} onChange={handleNumberChange} />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    </>\n  )\n}\n\nconst PersonsList = ({ personsToShow, handleDelete }) => {\n  return (\n    <>\n      <h2>Numbers</h2>\n      {personsToShow.map(person =>\n        <Person key={person.name} person={person} handleDelete={handleDelete}></Person>\n      )}\n    </>\n  )\n}\n\nconst Person = ({ person, handleDelete }) => {\n  return (\n    <div>{person.name} {person.number} <button onClick={() => handleDelete(person)}>delete</button></div>\n  )\n}\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return (\n      <></>\n    )\n  }\n  if (message.error) {\n    return (\n      <div className=\"errormessage\">{message.message}</div>\n    )\n  }\n  return (\n    <div className=\"message\">{message.message}</div>\n  )\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [filter, setFilter] = useState('');\n  const [message, setMessage] = useState(null);\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(response => {\n        setPersons(response.data)\n      });\n  }, [])\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value);\n  }\n\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value);\n  }\n\n  const handleDelete = (person) => {\n    if (window.confirm(`Delete ${person.name}?`)) {\n      personService\n        .deletedObject(person)\n        .then(response => {\n          const newPersons = persons.filter(listedPerson => listedPerson.name !== person.name);\n          setPersons(newPersons);\n          setMessage({ message: `Deleted ${person.name}`, error: false });\n          setTimeout(() => {\n            setMessage(null)\n          }, 5000);\n        })\n        .catch(error => {\n          const newPersons = persons.filter(listedPerson => listedPerson.name !== person.name);\n          setPersons(newPersons);\n        })\n    }\n\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault();\n    let existingPerson = null;\n    persons.forEach((person) => {\n      if (person.name === newName) {\n        existingPerson = person;\n      }\n    })\n    if (existingPerson !== null) {\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        existingPerson.number = newNumber;\n        personService\n          .update(existingPerson.id, existingPerson)\n          .then(response => {\n            setPersons(persons.map(person => person.id !== existingPerson.id ? person : existingPerson))\n            setNewName('');\n            setNewNumber('');\n            setMessage({ message: `Changed ${existingPerson.name}'s number`, error: false });\n            setTimeout(() => {\n              setMessage(null);\n            }, 5000);\n          })\n          .catch(error => {\n            setMessage({ message: `Information of ${existingPerson.name} has already been removed from server`, error: true });\n            const newPersons = persons.filter(listedPerson => listedPerson.name !== existingPerson.name);\n            setPersons(newPersons);\n            setTimeout(() => {\n              setMessage(null);\n            }, 5000);\n          });\n      }\n    } else {\n      const newPerson = {\n        name: newName,\n        number: newNumber\n      };\n      personService\n        .create(newPerson)\n        .then(response => {\n          newPerson.id = response.data.id;\n          setPersons(persons.concat(newPerson));\n          setNewName('');\n          setNewNumber('');\n          setMessage({ message: `Added ${newPerson.name}`, error: false });\n          setTimeout(() => {\n            setMessage(null)\n          }, 5000);\n        })\n        .catch(error => {\n          setMessage({ message: error.response.data.error, error: true });\n          setTimeout(() => {\n            setMessage(null);\n          }, 5000);\n        });\n    }\n  }\n\n  const personsToShow = (filter === '')\n    ? persons\n    : persons.filter(person => person.name.toLowerCase().includes(filter.toLowerCase()));\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message}></Notification>\n      <Filter filter={filter} handleFilterChange={handleFilterChange} ></Filter>\n      <AddPersonForm addPerson={addPerson} newName={newName} handleNameChange={handleNameChange} newNumber={newNumber} handleNumberChange={handleNumberChange}></AddPersonForm>\n      <PersonsList personsToShow={personsToShow} handleDelete={handleDelete}></PersonsList>\n    </div>\n  )\n\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}